name: CI

on:
  push:
  release:
    types: [published]

jobs:
  checks:
    name: "Checks"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8]
        requirements: ['-r requirements.txt']
        include:
          # historical requirements
          - name: "Minimum install_requires versions"
            requirements: numpy~=1.12.0 pandas~=0.24.0 SQLAlchemy~=1.2.19 psycopg2~=2.7.0
            pytest_flags: --ignore=siuba/dply/forcats.py siuba
            python-version: 3.6
          - name: "2019-late dependencies"
            requirements: numpy==1.17.4 pandas==0.24.2 SQLAlchemy==1.2.19 psycopg2==2.8.4
            pytest_flags: --ignore=siuba/dply/forcats.py siuba
            python-version: 3.6
          - name: "2020-early dependencies"
            requirements: numpy==1.17.4 pandas~=0.25.3 SQLAlchemy~=1.3.11 psycopg2~=2.8.4
            pytest_flags: --ignore=siuba/dply/forcats.py siuba
            python-version: 3.6
          # current
          - name: "2020-mid dependencies"
            python-version: 3.8
            requirements: numpy~=1.19.1 pandas~=1.1.0 SQLAlchemy~=1.3.18 psycopg2~=2.8.5

    # Service containers to run with `container-job`
    #services:
    #  # Label used to access the service container
    #  postgres:
    #    image: postgres
    #    env:
    #      POSTGRES_PASSWORD: ""
    #      POSTGRES_HOST_AUTH_METHOD: "trust"
    #    # Set health checks to wait until postgres has started
    #    options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    #    ports:
    #      - 5432:5432
    #  mysql:
    #    image: mysql
    #    env:
    #      MYSQL_ROOT_PASSWORD: ""
    #      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    #      MYSQL_DATABASE: "public"
    #    ports:
    #      - 3306:3306
    #    # by default, mysql rounds to 4 decimals, but tests require more precision
    #    command: --div-precision-increment=30
    #    options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5


    steps:
      - uses: actions/checkout@v2
      - name: Run docker-compose
        run: |
          docker-compose up --build -d
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install $REQUIREMENTS
          python -m pip install -r requirements-test.txt
          python -m pip install .
        env:
          REQUIREMENTS: ${{ matrix.requirements }}
      - name: Test with pytest
        run: |
          make test-travis
        env:
          SB_TEST_PGPORT: 5432
          PYTEST_FLAGS: ${{ matrix.pytest_flags }}
  deploy:
    name: "Deploy to PyPI"
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
